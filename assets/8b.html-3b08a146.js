import{_ as i,p as d,q as u,t as a,a4 as o,s as n,R as s,$ as t,n as c}from"./framework-5548083a.js";const k="/assets/收集数据-8eecfd65.png",h={},g=t(`<h1 id="八年级下学期计算机资料" tabindex="-1"><a class="header-anchor" href="#八年级下学期计算机资料" aria-hidden="true">#</a> 八年级下学期计算机资料</h1><h2 id="_1-python-编程基础" tabindex="-1"><a class="header-anchor" href="#_1-python-编程基础" aria-hidden="true">#</a> 1 Python 编程基础</h2><h3 id="_1-1-注释语句" tabindex="-1"><a class="header-anchor" href="#_1-1-注释语句" aria-hidden="true">#</a> 1.1 注释语句</h3><h4 id="_1-1-1-单行注释" tabindex="-1"><a class="header-anchor" href="#_1-1-1-单行注释" aria-hidden="true">#</a> 1.1.1 单行注释</h4><p><strong>定义：</strong> 单行的被编译器忽略的文本</p><p><strong>用途：</strong> 帮助阅读代码，利于后期维护，便于理解算法</p><p><strong>语法：</strong> <code># 注释内容</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 单行注释</span>
<span class="token comment"># 这是输出 Hello World 的代码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,9),m=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"单行注释可以便捷的帮助理解一行代码，也是比较常用的注释方式")],-1),y=t(`<h4 id="_1-1-2-多行注释" tabindex="-1"><a class="header-anchor" href="#_1-1-2-多行注释" aria-hidden="true">#</a> 1.1.2 多行注释</h4><p><strong>定义：</strong> 可跨越多行的被编译器忽略的文本</p><p><strong>用途：</strong> 书写函数批注，理解复杂算法</p><p><strong>语法：</strong> <code>&quot;&quot;&quot;注释内容&quot;&quot;&quot; / &#39;&#39;&#39;注释内容&#39;&#39;&#39;&#39;</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">hello_opt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    这是一个多行注释
    这个函数的用途是输出 Hello World
    不需要任何形参
    &quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,6),x=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"多行注释适合处理比单行注释复杂的场景。例如一个大型项目的函数等。它的特点是可以换行处理，不一定限制在单行")],-1),w=t(`<h3 id="_1-2-输入和输出" tabindex="-1"><a class="header-anchor" href="#_1-2-输入和输出" aria-hidden="true">#</a> 1.2 输入和输出</h3><h4 id="_1-2-1-输入" tabindex="-1"><a class="header-anchor" href="#_1-2-1-输入" aria-hidden="true">#</a> 1.2.1 输入</h4><p><strong>定义：</strong> 获得用户输入内容的函数</p><p><strong>语法：</strong> <code>变量 = input( 变量 / 数据类型 /...)</code></p><p><strong>用途：</strong> 实际开发中需要用户提供数据实现操作的场景（例如圆的面积的计算）</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个输出语句</span>
a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入：&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 用户输入的内容会被赋值给 a，所以打印出来的是用户输入的内容（例如输入 1 就输出 1 ）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div><p><code>input( )</code> 函数中可以什么都不填，但是这样可能会导致用户以为卡死了。所以建议填入一些提示信息</p><p><code>input( )</code> 函数会阻塞线程，就是程序到 <code>input( )</code> 这里就不动了除非用户输入数据并按下了回车 <strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 输出 Hello，此时程序正常运行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># input 阻塞线程，程序在这里停止</span>
a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入：&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 除非用户按下回车，否则下面这段代码不会执行</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我被执行了~&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>需要注意的是，<code>input( )</code> 函数获得到的内容默认类型都是字符串</p>`,11),b=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"输入是一个很实用的函数，它是用户与程序交流的途径。使用它我们将能发掘 Python 更多强大的功能。其获得到的内容都是字符串类型")],-1),_=t(`<h4 id="_1-2-2-输出" tabindex="-1"><a class="header-anchor" href="#_1-2-2-输出" aria-hidden="true">#</a> 1.2.2 输出</h4><p><strong>定义：</strong> 输出是把指定内容打印到终端上的函数</p><p><strong>语法：</strong> <code>print( 变量 / 数据类型 / ..)</code></p><p><strong>用途：</strong> 实际开发中需要与用户交互的场景（例如输出计算结果）</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义函数 a 并赋值 Hello</span>
a <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span>
<span class="token comment"># 输出 Hello World</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 输出 a。但因为 a 的值是 Hello，所以输出 Hello</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div><p>事实上 <code>print( )</code> 函数有相当多的强大功能，但是碍于你们还没有学表达式，先按下不表</p>`,7),v=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[n("code",null,"print( )"),s(" 是一个功能强大的函数，它是程序与用户交流的途径，也是程序开发中最常用的函数之一")])],-1),f=t(`<h3 id="_1-3-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-数据类型" aria-hidden="true">#</a> 1.3 数据类型</h3><p><strong>定义：</strong> 数据类型是一个值的集合和定义在这个值集上的一组操作的总称</p><p><strong>用途：</strong> 存储临时数据进行操作</p><p><strong>数据类型：</strong></p><table><thead><tr><th style="text-align:center;">中文名</th><th style="text-align:center;">英文名</th><th style="text-align:center;">转换函数</th><th style="text-align:center;">意义</th><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;">字符串</td><td style="text-align:center;"><code>str / string</code></td><td style="text-align:center;"><code>str( )</code></td><td style="text-align:center;">一般存储文字，符号等内容的数据类型。数字等也可以</td><td style="text-align:center;">变量 = <code>&quot;字符串&quot; / &#39;字符串&#39;</code></td></tr><tr><td style="text-align:center;">整数</td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;"><code>int( )</code></td><td style="text-align:center;">存储整数和小数，但是小数会被去掉小数点后边的部分（不会四舍五入）</td><td style="text-align:center;"><code>变量 = 整数</code></td></tr><tr><td style="text-align:center;">浮点数</td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;"><code>float( )</code></td><td style="text-align:center;">存储浮点数和整数，但是整数会跟上 <code>.0</code> 。例如 <code>float( 1 )</code> 就会变成 <code>1.0</code></td><td style="text-align:center;"><code>变量 = 浮点数</code></td></tr><tr><td style="text-align:center;">布尔值</td><td style="text-align:center;"><code>bool</code></td><td style="text-align:center;"><code>bool( )</code></td><td style="text-align:center;">只有两种可存储的数据：<code>True</code> 和 <code>False</code>。分别代表真和假</td><td style="text-align:center;"><code>变量 = True / False</code></td></tr><tr><td style="text-align:center;">空值</td><td style="text-align:center;"><code>None</code></td><td style="text-align:center;">无</td><td style="text-align:center;">代表什么都没有，但是不与其它任何数据类型等价</td><td style="text-align:center;"><code>变量 = None</code></td></tr></tbody></table><p>以上是 Python 中所有的数据类型表格。我会对其中的知识点进行系统的讲解</p><h4 id="_1-3-1-字符串数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-1-字符串数据类型" aria-hidden="true">#</a> 1.3.1 字符串数据类型</h4><p><strong>定义：</strong> 一般存储文字，符号等内容的数据类型。数字等也可以</p><p><strong>用途：</strong> 存储用户输入，存储输出信息</p><p><strong>语法：</strong> <code>变量 = &quot;字符串&quot; / &#39;字符串&#39;</code></p><p><strong>转换函数：</strong> <code>str( )</code></p><p>字符串是从新手期到老手都会用到的类型，也是最常用的数据类型。它的主要特点是 <strong>占用内存大，可存储内容多</strong></p><p>字符串字符串，顾名思义是存储文字的。一般来说我们把它用于输出文字信息，例如 <code>Hello World</code> ， <code>1</code> ······ 等等，1 也是字符串吗？</p><p>答案是肯定的，也许这有点违反我们的数学常识，但是我给你们解释一下就明白了</p><p>我们中国有这么多人，有人同名同姓很合理吧？现在你遇到了两个人：一个男的叫小明，另一个女的也叫小明。那你能说她们俩是一个人吗？当然不能，程序也是这样</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 真正的整数 1</span>
a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 字符串的 1</span>
b <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>
</code></pre></div>`,17),q=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("显示的内容相同不代表两个函数存储的内容意义相同。在这个示例中 "),n("code",null,"a"),s(" 是不等于 "),n("code",null,"b"),s(" 的")])],-1),Z=t(`<p>那么到这里有同学就要问了，假如我想要让整数的 <code>1</code> 变成字符串的 <code>1</code>。有可能吗？</p><p>当然有！Python 为我们提供了类型转换函数，每个数据类型都有自己的类型转换函数。只要你填进的内容符合要求就可以转换</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个整数类型的 2</span>
a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment"># 这是一个字符串变量</span>
b <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token comment"># 将 a 中整数类型的 2 转换为字符串类型的 2 并赋值给 b</span>
b <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 输出 b，此时应该是字符串类型的 b</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token comment"># 输出 b 的类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,4),H=n("p",null,[s("由于 "),n("code",null,"str"),s(" 类型的通用性，"),n("code",null,"str( )"),s(" 几乎可以转换任何数据类型。那么其它数据类型也如此吗")],-1),M=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[s("字符串数据类型（"),n("code",null,"str"),s("）有着占用内存大、可存储内容多的特点。转换可以使用 "),n("code",null,"str( )"),s(" 函数转换")])],-1),S=t(`<h4 id="_1-3-2-整数数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-2-整数数据类型" aria-hidden="true">#</a> 1.3.2 整数数据类型</h4><p><strong>定义：</strong> 存储整数和小数的数据类型</p><p><strong>用途：</strong> 算法中数据的存储，计算结果的保存</p><p><strong>语法：</strong> <code>变量 = 整数 / 小数</code></p><p><strong>转换函数：</strong> <code>int( )</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 是一个整数类型的变量</span>
a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 1 也是整数数据类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><p>事实上你看到的所有不带 <code>&quot; &quot;</code> 或 <code>&#39; &#39;</code> 的整数都是整数数据类型</p><p>我们说过每个数据类型都有转换函数，<code>int</code> 数据类型也不例外。但它有些特别</p><p>整数数据类型和浮点数数据类型的边界比较模糊。唯一的区别就是一个专门负责处理整数，一个专门负责处理浮点数。可是浮点数可以被存储进整数数据类型里边，整数可以存储进浮点数数据类型里边</p><p>那么这样操作数据会有什么变化呢？不会 Python 就会让你无变化的进行这样子的操作造成歧义吗？</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 显然 a 是一个浮点数数据类型</span>
a <span class="token operator">=</span> <span class="token number">1.1</span>
<span class="token comment"># 将 a 转换为整数并赋值给 b</span>
b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># b 存储的是 1，输出 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre></div>`,13),C=t(`<p>这是为什么呢？Python 为了明确职责和一些复杂的数据类型操作，会将转换浮点数为整数的结果直接把小数部分去掉，只保留整数部分并且不会四舍五入。所以 <code>1.1</code> 被保留整数部分后就是 <code>1</code>，那么 <code>b</code> 存储的当然就是 <code>1</code></p><p>那么字符串可以转换为 <code>int</code> 数据类型吗？答案是可以，也不可以</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 是字符串数据类型的 1</span>
a <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
<span class="token comment"># 将 a 的值转换为整数数据类型并赋值给 b</span>
b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 输出 b，b 存储的是整数类型的 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token comment"># c 是字符串类型的 hello</span>
c <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment"># 将 c 的值转换为整数数据类型并赋值给 d</span>
d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token comment"># 报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</code></pre></div>`,3),Y=n("p",null,[s("那么为什么字符串数据类型的 "),n("code",null,"1"),s(" 可以但是字符串数据类型的 "),n("code",null,"hello"),s(" 不可以呢？")],-1),B=n("p",null,[s("答案显而易见，因为哪个数字是 "),n("code",null,"hello"),s(" 嘛。所以整数数据类型只能转换其它存储的是整数或小数的内容的数据类型（例如 "),n("code",null,'"2"'),s("）")],-1),F=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[s("整数数据类型（"),n("code",null,"int"),s("）是专门负责处理整数的数据类型。如果转换浮点数数据类型为整数数据类型，会只保留整数部分并且 "),n("strong",null,"不会"),s(" 四舍五入。其他数据类型也可以转换为整数数据类型，前提是它存储的内容是数字")])],-1),j=t(`<h4 id="_1-3-3-浮点数数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-3-浮点数数据类型" aria-hidden="true">#</a> 1.3.3 浮点数数据类型</h4><p><strong>定义：</strong> 存储浮点数和整数的数据类型</p><p><strong>用途：</strong> 存储更精细的数据，更复杂的数据计算</p><p><strong>语法：</strong> <code>变量 = 整数 / 小数</code></p><p><strong>转换函数：</strong> <code>float( )</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 是一个浮点数数据类型的变量</span>
a <span class="token operator">=</span> <span class="token number">1.1</span>
<span class="token comment"># 1.1 也是浮点数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span>
</code></pre></div><p>和整数一样，其实它们都是数字。唯一的区别只是有个小数点而已，也正是因为浮点数有这个小数点所以我们才叫它浮点数（理工的浪漫了属于是）</p><p>既然它也是数字，那么浮点数有什么特性呢？当然是能存储高精度的数字嘛，不同于整数数据类型只能保存整数部分，浮点数数据类型可以存储非整数部分</p><p>同样，它的转换函数也可以填入整数，那么这又会对数据本身产生什么影响呢？</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 是整数数据类型的变量</span>
a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment"># 将 a 转换为浮点数并赋值给 b</span>
b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 1 后边多了个 &quot;.0&quot; (1.0)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre></div><p>同样，为了明确职责，减小歧义，Python 会对数据进行处理。如果你传入的是一个整数就会加上 <code>.0</code> 改变为浮点数</p><p>那么字符串可以转换为 <code>float</code> 数据类型吗？答案同样是可以、也不可以</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 是字符串数据类型的 1.1</span>
a <span class="token operator">=</span> <span class="token string">&#39;1.1&#39;</span>
<span class="token comment"># 将 a 的值转换为浮点数数据类型并赋值给 b</span>
b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token comment"># 输出 b，b 存储的是浮点数数据类型的 1.1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token comment"># c 是字符串类型的 hello</span>
c <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token comment"># 将 c 的值转换为浮点数数据类型并赋值给 d</span>
d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token comment"># 报错</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</code></pre></div>`,15),T=n("p",null,[s("原因很简单，你也没见过是 "),n("code",null,"hello"),s(" 的浮点数嘛。同样它也可以转换其它数据类型存储内容为数字的变量")],-1),N=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[s("浮点数数据类型（float）是专门负责处理浮点数的数据类型。如果转换整数数据类型为浮点数数据类型，会在后面加上 "),n("code",null,".0"),s(" 改变整数为浮点数")])],-1),L=t(`<h4 id="_1-3-4-布尔数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-4-布尔数据类型" aria-hidden="true">#</a> 1.3.4 布尔数据类型</h4><p><strong>定义：</strong> 只有真（ <code>True</code> ）和假（ <code>False</code> ）的数据类型</p><p><strong>语法：</strong> <code>变量 = True / False</code></p><p><strong>用途：</strong> 表达式判断，循环结构</p><p><strong>转换函数：</strong> <code>bool( )</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 布尔值中的真</span>
a <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># 布尔值中的假</span>
b <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre></div><p>我们都知道计算机世界是由 2 进制构成的，事实上我们在电脑上看到的其它东西对于计算机来说都是 <code>0</code> 和 <code>1</code> 。甚至是逻辑，布尔类型就是这么个东西</p><p>布尔值只有两种，<code>True</code> 和 <code>False</code> ，分别代表真和假。它的运用很广泛，在之后的循环结构和分支结构中等等我们都会见到它。值得注意的是 <code>True</code> 和 <code>False</code> 用 <code>1</code> 和 <code>0</code> 表示也是正确的</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment"># 判断 a 是否大于 b 。因为 a 确实大于 b，所以输出 True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>

<span class="token comment"># 判断 5 是否小于 4 。因为 5 不小于 4，所以输出 False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre></div>`,11),P=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[s("布尔数据类型（bool）是一种真伪判断符，只有真和假的两种状态（也许这才是计算机的模样，天真的孩子） 除了用 "),n("code",null,"True"),s(" 和 "),n("code",null,"False"),s(" 可以表示真和假之外，"),n("code",null,"1"),s(" 和 "),n("code",null,"0"),s(" 也可以")])],-1),X=t(`<h4 id="_1-3-5-空值" tabindex="-1"><a class="header-anchor" href="#_1-3-5-空值" aria-hidden="true">#</a> 1.3.5 空值</h4><p><strong>定义：</strong> 代表空的数据类型</p><p><strong>语法：</strong> <code>变量 = None</code></p><p><strong>用途：</strong> 声明变量</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明变量 a</span>
a <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token comment"># 创建整数数据类型变量 b，并赋值 0</span>
b <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># a 与 b 是否等价？</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>
<span class="token comment"># 输出 False，代表不等价</span>
</code></pre></div>`,6),W=n("p",null,[s("空值，顾名思义就是没有任何东西的数据类型。这个数据类型一般用于占位来声明变量。需要注意的是，因为空值本身就是一个数据类型，所以它不与 "),n("code",null,"0"),s(" 或 "),n("code",null,'" "'),s(" 等价")],-1),K=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"空值一般用于占位。由于它本身就是一个数据类型，所以不与其它数据类型中代表空的数值等价")],-1),R=t(`<h3 id="_1-4-表达式" tabindex="-1"><a class="header-anchor" href="#_1-4-表达式" aria-hidden="true">#</a> 1.4 表达式</h3><p><strong>定义：</strong> 由常量，变量，运算符，小括号等按一定语法规则组成的式子</p><p><strong>用途：</strong> 进行数据操作，优化输出内容，计算结果</p><h4 id="_1-4-1-算数运算符" tabindex="-1"><a class="header-anchor" href="#_1-4-1-算数运算符" aria-hidden="true">#</a> 1.4.1 算数运算符</h4><p><strong>定义：</strong> 用于数学计算的运算符</p><p><strong>用途：</strong> 数据操作</p><p><strong>算术运算符：</strong></p><table><thead><tr><th style="text-align:center;">运算</th><th style="text-align:center;">运算符</th><th style="text-align:center;">例子</th><th style="text-align:center;">结果</th><th style="text-align:center;">意义</th></tr></thead><tbody><tr><td style="text-align:center;">加法</td><td style="text-align:center;"><code>+</code></td><td style="text-align:center;"><code>a = 1 + 2</code></td><td style="text-align:center;">3</td><td style="text-align:center;">一个数与另一个数的加法运算求和</td></tr><tr><td style="text-align:center;">减法</td><td style="text-align:center;"><code>-</code></td><td style="text-align:center;"><code>a = 3 - 1</code></td><td style="text-align:center;">2</td><td style="text-align:center;">一个数与另一个数的减法运算</td></tr><tr><td style="text-align:center;">乘法</td><td style="text-align:center;"><code>*</code></td><td style="text-align:center;"><code>a = 3 * 4</code></td><td style="text-align:center;">12</td><td style="text-align:center;">一个数与另一个数的乘法运算</td></tr><tr><td style="text-align:center;">除法</td><td style="text-align:center;"><code>/</code></td><td style="text-align:center;"><code>a = 12 / 6</code></td><td style="text-align:center;">2</td><td style="text-align:center;">一个数与另一个数的除法运算</td></tr><tr><td style="text-align:center;">求幂</td><td style="text-align:center;"><code>a ** a</code></td><td style="text-align:center;"><code>a = 3 ** 2</code></td><td style="text-align:center;">9</td><td style="text-align:center;">一个数与另一个数的幂运算</td></tr><tr><td style="text-align:center;">括号</td><td style="text-align:center;"><code>( )</code></td><td style="text-align:center;"><code>a = (3 + 4) * 2</code></td><td style="text-align:center;">14</td><td style="text-align:center;">提升运算优先级</td></tr><tr><td style="text-align:center;">整除</td><td style="text-align:center;"><code>//</code></td><td style="text-align:center;"><code>a = 11 // 2</code></td><td style="text-align:center;">5</td><td style="text-align:center;">除不尽的取整数部分</td></tr><tr><td style="text-align:center;">求余</td><td style="text-align:center;"><code>%</code></td><td style="text-align:center;"><code>a = 15 % 2</code></td><td style="text-align:center;">1</td><td style="text-align:center;">除不尽的取余数</td></tr></tbody></table><p>表达式其实就是我们数学中的运算符，所以它应该很好理解吧？但还是请同学们认真背一背符号，不要搞混了</p><p>因为其他运算比较简单，我就只讲两个比较特殊的运算</p><h5 id="_1-4-1-1-整除" tabindex="-1"><a class="header-anchor" href="#_1-4-1-1-整除" aria-hidden="true">#</a> 1.4.1.1 整除</h5><p><strong>定义：</strong> 将一个数除以另一个数，然后向下取整到最接近的整数的除法</p><p><strong>语法：</strong> <code>a = b // c</code></p><p><strong>用途：</strong> 做只保留整数的运算</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 变量 a 的值是 6 整除 2 的结果</span>
a <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">//</span> <span class="token number">2</span>
<span class="token comment"># 输出的也是 6 整除 2 的结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div>`,16),G=t(`<p>整除整除，刚好除完嘛。但是整除有一些特殊的性质你们要知道</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 变量 a 的值是 5 整除 2 的结果</span>
a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">//</span> <span class="token number">2</span>
<span class="token comment"># 输出 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div>`,3),D=n("p",null,[s("没错，在这个示例中，5 显然不可能整除 2。那么程序运行之后为什么会输出 2 呢？我们知道，在除法中，结果有 "),n("strong",null,"商"),s(" 和 "),n("strong",null,"余数"),s(" 两个部分，而整除就代表只取商")],-1),I=n("p",null,"这个例子中 5 除 2 显然商是 2，余数是 1。所以输出的就是 2",-1),J=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[s("整除（ "),n("code",null,"//"),s(" ）中，得到的结果一定是整数，取的值是这个除法的商")])],-1),A=t(`<h5 id="_1-4-1-2-取余" tabindex="-1"><a class="header-anchor" href="#_1-4-1-2-取余" aria-hidden="true">#</a> 1.4.1.2 取余</h5><p><strong>定义：</strong> 计算两个数相除之后的余数的除法</p><p><strong>语法：</strong> <code>a = b % c</code></p><p><strong>用途：</strong> 数据操作，只需要余数的运算</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 变量 a 的值是 5 取余 2 的结果，是 1</span>
a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span>
<span class="token comment"># 输出的也是 5 取余 2 的结果，是 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div>`,6),V=t(`<p>取余运算只会获得相除后的余数，如上面的示例一样。5 除 2 商是 2 余数是 1。所以输出 1</p><p>那么如果刚好能整除呢？</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 变量 a 的值是 6 取余 2 的结果</span>
a <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">2</span>
<span class="token comment"># 输出 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div>`,4),E=n("p",null,"如果能整除那就是没有余数，那余数就是 0。在开发过程中我们通常使用这种手段判断一个数字是不是某个数字的倍数",-1),Q=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"取余运算与整除是一对好兄弟，整除运算取商，取余运算取余。如果能整除则取余 0")],-1),z=t(`<h4 id="_1-4-2-字符串运算符" tabindex="-1"><a class="header-anchor" href="#_1-4-2-字符串运算符" aria-hidden="true">#</a> 1.4.2 字符串运算符</h4><p><strong>定义：</strong> 实现字符串与字符串之间的操作的运算符</p><p><strong>用途：</strong> 输出内容优化，字符串数据操作</p><p><strong>字符串运算符：</strong></p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">含义</th><th style="text-align:center;">示例</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">连接字符串</td><td style="text-align:center;"><code>print(&quot;12&quot; + &quot;34&quot;)</code></td><td><code>&quot;12&quot; + &quot;34&quot;</code> 的值是 <code>&quot;1234&quot;</code></td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">重复若干次字符串</td><td style="text-align:center;"><code>print(2 * &quot;哈&quot;)</code></td><td><code>2</code> * <code>&quot;哈&quot;</code> 的值是 <code>哈哈</code></td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 的值是 &quot;5&quot; 和 &quot;2&quot; 连接起来的样子</span>
a <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;2&quot;</span>
<span class="token comment"># 输出 a，结果是 &quot;52&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># a 的结果是 Hello 被重复六次的样子</span>
a <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token string">&quot;Hello&quot;</span>
<span class="token comment"># 输出 6 次 Hello</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div>`,7),O=n("h3",{id:"_1-5-随堂练习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-5-随堂练习","aria-hidden":"true"},"#"),s(" 1.5 随堂练习")],-1),$=n("p",null,"你们已经迈出了走向 Python 世界的一大步。为了巩固知识，减少遗忘。我为你们提供了一套练习题，可以根据自己的需要阅览",-1),U=n("iframe",{src:"https://ks.wjx.top/vm/rXYFzpD.aspx?width=795&source=iframe&s=t&tm=1&sm=t",width:"100%",height:"1300",frameborder:"0",style:{overflow:"auto"}},null,-1),nn=t('<h2 id="_2-分支结构" tabindex="-1"><a class="header-anchor" href="#_2-分支结构" aria-hidden="true">#</a> 2 分支结构</h2><p>分支结构旨在让程序拥有思考的能力</p><p>举个例子我看到可乐。我会先看我自己有多少钱，如果有 3 元我就买，没 3 元我就不买</p><p>在程序中，如果我买那么就是 <code>True</code>，不买就是 <code>False</code>。那么我们该如何得出我买还是不买的思考结果呢？答案就是分支语句</p><h3 id="_2-1-条件表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-条件表达式" aria-hidden="true">#</a> 2.1 条件表达式</h3><p>我们首先要知道一些基础的判断逻辑</p><h4 id="_2-1-1-关系运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-1-关系运算符" aria-hidden="true">#</a> 2.1.1 关系运算符</h4><p><strong>定义：</strong> 关系运算又称为比较运算，用于对两个类型相同的表达式的值大小进行比较，其结果只能为 <code>True</code> 或 <code>False</code></p><p><strong>用途：</strong> 判断两个数的数值大小，分支结构</p><p><strong>关系运算符：</strong></p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">含义</th><th style="text-align:center;">示例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td style="text-align:center;"><code>1 &lt; 2</code></td><td style="text-align:center;"><code>True</code></td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于或等于</td><td style="text-align:center;"><code>3 + 1 &lt;= 2 + 1</code></td><td style="text-align:center;"><code>False</code></td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于或等于</td><td style="text-align:center;"><code>1 + 1 &gt;= 2</code></td><td style="text-align:center;"><code>True</code></td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td style="text-align:center;"><code>&quot;a&quot; &gt; &quot;b&quot;</code></td><td style="text-align:center;"><code>False</code></td></tr><tr><td style="text-align:center;">==</td><td style="text-align:center;">等于</td><td style="text-align:center;"><code>&quot;abc&quot; == &quot;ABC&quot;</code></td><td style="text-align:center;"><code>False</code></td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td style="text-align:center;"><code>3 != 5</code></td><td style="text-align:center;"><code>True</code></td></tr></tbody></table>',11),sn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("算数运算符的运算优先级 "),n("strong",null,"高于"),s(" 关系运算符")])],-1),tn=t(`<h4 id="_2-1-2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-2-逻辑运算符" aria-hidden="true">#</a> 2.1.2 逻辑运算符</h4><p><strong>定义：</strong> 逻辑运算又称为布尔运算，用于逻辑值进行逻辑运算</p><p><strong>用途：</strong> 判断真伪，分支结构</p><p><strong>逻辑表达式：</strong></p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">中文</th><th style="text-align:center;">含义</th><th style="text-align:center;">示例</th><th style="text-align:center;">结果</th></tr></thead><tbody><tr><td style="text-align:center;">and</td><td style="text-align:center;">与</td><td style="text-align:center;">左右两边都为 <code>True</code>，其值为 <code>True</code>，否则为 <code>False</code></td><td style="text-align:center;"><code>3 &lt; 2 and 1 &gt; 0</code></td><td style="text-align:center;"><code>False</code></td></tr><tr><td style="text-align:center;">or</td><td style="text-align:center;">或</td><td style="text-align:center;">左右两边都为 <code>False</code>， 其值为 <code>False</code>，否则为 <code>True</code></td><td style="text-align:center;"><code>3 &lt; 2 or 1 &gt; 0</code></td><td style="text-align:center;"><code>True</code></td></tr><tr><td style="text-align:center;">not</td><td style="text-align:center;">非</td><td style="text-align:center;">反转布尔值结果，非 <code>False</code> 即为 <code>True</code>，非 <code>False</code> 即为 <code>True</code></td><td style="text-align:center;"><code>not 1 &gt; 0</code></td><td style="text-align:center;"><code>False</code></td></tr></tbody></table><h3 id="_2-2-分支语句" tabindex="-1"><a class="header-anchor" href="#_2-2-分支语句" aria-hidden="true">#</a> 2.2 分支语句</h3><p>前面的内容视为对本知识点的铺垫，因为没听前面的根本听不懂后边的内容</p><h4 id="_2-2-1-if-语句" tabindex="-1"><a class="header-anchor" href="#_2-2-1-if-语句" aria-hidden="true">#</a> 2.2.1 if 语句</h4><p><strong>定义：</strong> 单分支结构，如果成立就执行 <code>if</code> 后的语句，不成立则不输出</p><p><strong>用途：</strong> 基础逻辑处理</p><p><strong>语法：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    条件为真执行语句
</code></pre></div><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明整数类型变量 a 并赋值 3</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token comment"># 声明整数类型变量 b 并赋值 5</span>
b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment"># 如果 a 大于 b</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>
    <span class="token comment"># 不输出，因为 a 小于 b</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 比 b 大&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 没有输出内容</span>
</code></pre></div>`,14),an=t(`<h4 id="_2-2-2-if-else-语句" tabindex="-1"><a class="header-anchor" href="#_2-2-2-if-else-语句" aria-hidden="true">#</a> 2.2.2 if else 语句</h4><p><strong>定义：</strong> 二分支结构，如果 <code>if</code> 内条件不成立则执行 <code>else</code> 中的语句</p><p><strong>用途：</strong> 简单逻辑处理</p><p><strong>语法：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    条件为真执行语句

<span class="token keyword">else</span><span class="token punctuation">:</span>
    条件为假执行语句
</code></pre></div><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明整数类型变量 a 并赋值 3</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token comment"># 声明整数类型变量 b 并赋值 5</span>
b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment"># 如果 a 大于 b</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>
    <span class="token comment"># 不输出，因为 a 小于 b</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 比 b 大&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 其它情况</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出，因为不满足 a 大于 b 的条件，则 a 小于 b 的情况属于其它情况</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 比 b 小&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,7),en=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("条件表达式和 "),n("code",null,"else"),s(" 关键字后都要跟英文冒号，冒号下一条语句需要缩进，而且代码的缩进长度相等")])],-1),on=t(`<h4 id="_2-2-3-if-elif-else-语句" tabindex="-1"><a class="header-anchor" href="#_2-2-3-if-elif-else-语句" aria-hidden="true">#</a> 2.2.3 if elif else 语句</h4><p><strong>定义：</strong> 多分支结构，如果 <code>if</code> 内条件不成立则判断 <code>elif</code> 语句是否成立，如果 <code>elif</code> 成立执行 <code>elif</code> 内的语句；如果 <code>if</code> 和 <code>elif</code> 都不成立执行 <code>else</code> 内的语句</p><p><strong>用途：</strong> 复杂逻辑处理</p><p><strong>语法：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    条件为真执行语句
<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    条件为真执行语句
···
<span class="token keyword">else</span><span class="token punctuation">:</span>
    所有 <span class="token keyword">if</span> 和 <span class="token keyword">else</span> 判断都为假执行语句
</code></pre></div><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明整数类型变量 a 并赋值 3</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token comment"># 声明整数类型变量 b 并赋值 5</span>
b <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment"># 如果 a 大于 b</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>
    <span class="token comment"># 不输出，因为 a 小于 b</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 比 b 大&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 如果 a 等于 b</span>
<span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>
    <span class="token comment"># 不输出，因为 a 不等于 b</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 等于 b&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 其它情况</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出，因为不满足 a 大于 b 的条件，则 a 小于 b 的情况属于其它情况</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 比 b 小&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,7),pn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("如果 "),n("code",null,"if"),s(" 成立就不会执行 "),n("code",null,"elif"),s("，如果 "),n("code",null,"elif"),s(" 成立就不会执行 "),n("code",null,"else"),n("code",null,"elif"),s(" 语句可以有多条，如果中间有一条成立则后边的所有语句都不执行")])],-1),cn=n("h3",{id:"_2-3-随堂练习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-随堂练习","aria-hidden":"true"},"#"),s(" 2.3 随堂练习")],-1),ln=n("iframe",{src:"https://ks.wjx.top/vm/rrxZ2DY.aspx?width=795&source=iframe&s=t&tm=1&sm=t",width:"100%",height:"1718",frameborder:"0",style:{overflow:"auto"}},null,-1),rn=t(`<h2 id="_3-循环结构" tabindex="-1"><a class="header-anchor" href="#_3-循环结构" aria-hidden="true">#</a> 3 循环结构</h2><p>循环结构对于我们学习算法来说相当重要，它是我们实现一些高级操作的基础</p><h3 id="_3-1-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-1-for-循环" aria-hidden="true">#</a> 3.1 for 循环</h3><p><strong>定义：</strong> 重复执行指定次数的循环</p><p><strong>语法：</strong> <code>for 变量 in range(循环次数)</code></p><p><strong>用途：</strong> 算法</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># a 为整数类型 3</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token comment"># 重复执行 5 次</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># a 等于 a 乘 2</span>
    a <span class="token operator">*=</span> <span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre></div>`,8),dn=t('<p><code>for</code> 循环像一个和自己说连续不吃 3 天饭的女性，如果没满 3 天就绝不吃饭。这是一个相当有趣也固执的循环</p><p>在示例中使用的方法比较少见，因为这个是相当基础的用法。我们一般会用到更高级的方法</p><p><strong>高级语法：</strong> <code>for 变量 in range(起始数, 结束数, 步长)</code></p><p><strong>语法解释：</strong></p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">意义</th><th style="text-align:center;">注意</th></tr></thead><tbody><tr><td style="text-align:center;">起始数</td><td style="text-align:center;">从什么数字开始</td><td style="text-align:center;">如果不填起始数，那么默认从 0 开始</td></tr><tr><td style="text-align:center;">结束数</td><td style="text-align:center;">到什么数字结束</td><td style="text-align:center;">必填项目</td></tr><tr><td style="text-align:center;">步长</td><td style="text-align:center;">间隔多少取值</td><td style="text-align:center;">如果不填步长，那么默认为 1</td></tr></tbody></table>',5),un=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,"步长有特殊用法。如果步长是正数（例如 1），那么就会正向输出（0, 1, 2, 3, 4）。但如果步长和结束数是负数（例如步长 -1，结束数 -1），那么就会逆向输出（4, 3, 2, 1, 0）"),n("p",null,[s("输出结果的范围不包括结束数本身（因为循环到结束数就终止了，不会输出）。所以 "),n("code",null,"range(1, 10)"),s(" 的结果会是 "),n("code",null,"1, 2, ..., 9")])],-1),kn=t(`<p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 开始值不输入的话默认从0开始，打印输出0到9</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token comment"># 步长值不输入的话默认为1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token comment"># 1, 2, 3, 4, 5, 6, 7, 8, 9</span>
    
<span class="token comment"># 步长值输入为2</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
   	<span class="token comment"># 1, 3, 5, 7, 9</span>

<span class="token comment"># 打印输出10, 9, 8, 7, 6,5,4,3,2, 1, 0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre></div>`,2),hn=t('<p>各位可以发现，我们填入了一个 <code>i</code> 在 <code>for</code> 循环中，这意味着什么呢？事实上 <code>i</code> 是 <code>item</code>，代表着当前循环的值</p><p>比方说上面演示的第二种方法：<code>for i in range(1, 10)</code>。意味着 <code>i</code> 在第一次循环中代表 1,第二次循环中代表 2。以此类推</p><h3 id="_3-2-while-循环" tabindex="-1"><a class="header-anchor" href="#_3-2-while-循环" aria-hidden="true">#</a> 3.2 while 循环</h3><p><strong>定义：</strong> 按照特定条件执行的循环</p><p><strong>语法：</strong></p>',5),gn=n("div",{class:"language-python","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"while"),s(" 条件"),n("span",{class:"token punctuation"},":"),s(`
`)])])],-1),mn=n("div",{class:"language-python","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},":"),s(`
`)])])],-1),yn=t(`<p><strong>用途：</strong> 需要重复执行的单线程语句</p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># i 默认为整数类型 0</span>
i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token comment"># 这是一个条件循环，只有 i 小于 10 的时候才会执行</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token comment"># 每循环一次 i 加 1</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token comment"># 输出 i，i 此时应该等于 9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre></div>`,3),xn=t(`<p>上面的示例是条件循环，只有当满足条件的时候才会结束。这部分的内容应该很好理解</p><p><code>while</code> 循环就像一个不到 60 斤不会停止减肥的女性哦~</p><p><strong>示例2：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个死循环，如果不干预永远不会停止</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出 1</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div>`,4),wn=t(`<p>上面的示例是死循环，它会从代码结尾回到开头······如果没有特殊操作永远不会停止！那么我们有办法让死循环停止吗？当然，我们需要使用 <code>break</code> 跳出循环</p><p><strong>示例3：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个死循环</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 我们给了它一个 i 小于 10 输出 1 的条件</span>
    <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># 如果不小于 10</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># 跳出循环，这个死循环将会被终止</span>
        <span class="token keyword">break</span>

<span class="token comment"># 因此它与下面这条语句等价</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div>`,3),bn=n("p",null,[s("没错，"),n("code",null,"break"),s(" 语句让我们成功的把死循环变成了条件循环，"),n("code",null,"break"),s(" 意为跳出，你可以在不希望程序继续执行的时候使用")],-1),_n=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[n("code",null,"while"),s(" 除非条件为假否则永远不会终止")])],-1),vn=n("h3",{id:"_3-3-随堂练习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-随堂练习","aria-hidden":"true"},"#"),s(" 3.3 随堂练习")],-1),fn=n("iframe",{src:"https://ks.wjx.top/vm/OLvcDcs.aspx?width=760&source=iframe&s=t",width:"100%",height:"1200",frameborder:"0",style:{overflow:"auto"}},null,-1),qn=t('<h2 id="_4-强大的-python-库" tabindex="-1"><a class="header-anchor" href="#_4-强大的-python-库" aria-hidden="true">#</a> 4 强大的 Python 库</h2><p><strong>定义：</strong> 具有相关功能模块的集合</p><p><strong>库的种类：</strong> Python 中有上千种由开源社区开发的优秀的第三方库。每一个库都包含特定功能的相关函数，针对不同的应用发挥不同的作用</p><h3 id="_4-1-库的使用" tabindex="-1"><a class="header-anchor" href="#_4-1-库的使用" aria-hidden="true">#</a> 4.1 库的使用</h3><p>初步了解库的一些基本操作</p><h4 id="_4-1-1-导入库" tabindex="-1"><a class="header-anchor" href="#_4-1-1-导入库" aria-hidden="true">#</a> 4.1.1 导入库</h4><p><strong>语法：</strong></p>',7),Zn=n("div",{class:"language-python","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"<"),s("库别名"),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"."),n("span",{class:"token operator"},"<"),s("函数名"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token operator"},"<"),s("库别名"),n("span",{class:"token operator"},">"),s(`
`)])])],-1),Hn=n("div",{class:"language-python","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"."),n("span",{class:"token operator"},"<"),s("函数名"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"<"),s("函数参数"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),s(`
`)])])],-1),Mn=n("div",{class:"language-python","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"*"),s(`
`),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token operator"},"<"),s("库名"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"import"),s(" 函数名"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},"."),n("span",{class:"token punctuation"},","),s(` 函数名
`)])])],-1),Sn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,[s("如果使用第一种方法，因为使用了别的名称代替了原本库的名称，所以在调用库的函数时要加上 "),n("code",null,"<库别名>"),s(" 做前缀")])],-1),Cn=t(`<h4 id="_4-1-2-安装第三方库" tabindex="-1"><a class="header-anchor" href="#_4-1-2-安装第三方库" aria-hidden="true">#</a> 4.1.2 安装第三方库</h4><p><strong>语法：</strong> <code>pip install &lt;库名&gt;</code></p><p><strong>示例：</strong></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> scikit-learn
</code></pre></div><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入 turtle 库命名为 t</span>
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> t
<span class="token comment"># 导入 time 库中的时间模块命名为 s</span>
<span class="token keyword">import</span> time<span class="token punctuation">.</span>sleep <span class="token keyword">as</span> s
</code></pre></div><h3 id="_4-2-random-库" tabindex="-1"><a class="header-anchor" href="#_4-2-random-库" aria-hidden="true">#</a> 4.2 random 库</h3><p><strong>定义：</strong> <code>random</code> 是 Python 的一种标准库，用来产生随机数</p><h4 id="_4-2-1-randint-函数的使用" tabindex="-1"><a class="header-anchor" href="#_4-2-1-randint-函数的使用" aria-hidden="true">#</a> 4.2.1 randint 函数的使用</h4><p><strong>定义：</strong> 生成随机整数的函数</p><p><strong>用途：</strong> 随机生成一个整数，整数 n 的范围是 <code>a &lt;= n &lt;= b</code></p><p><strong>语法：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre></div><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入随机库</span>
<span class="token keyword">import</span> random <span class="token keyword">as</span> r
<span class="token comment"># 使用随机库的生成随机整数的函数，范围是 1 ~ 100</span>
target <span class="token operator">=</span> r<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment"># 如果生成的数等于 50</span>
<span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出等于 50</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等于 50&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 如果不是 50</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 输出不是 50</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;不是 50&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,15),Yn=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,[n("code",null,"random"),s(" 库是专责生成随机数的库，而 "),n("code",null,"random.randint"),s(" 则是其中专责用来处理随机整数的库。"),n("code",null,"randint"),s(" 函数的语法是 "),n("code",null,"randint(a, b)")])],-1),Bn=t(`<h3 id="_4-3-turtle-库" tabindex="-1"><a class="header-anchor" href="#_4-3-turtle-库" aria-hidden="true">#</a> 4.3 turtle 库</h3><p><strong>定义：</strong> <code>turtle</code> 库是 Python 中自带的画图库</p><p><strong>常见函数：</strong></p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">语法</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>shape()</code></td><td style="text-align:center;"><code>shape(形状关键字)</code></td><td style="text-align:center;">改变画笔形状</td></tr><tr><td style="text-align:center;"><code>width()</code></td><td style="text-align:center;"><code>width(粗细)</code></td><td style="text-align:center;">改变画笔粗细</td></tr><tr><td style="text-align:center;"><code>pencolor()</code></td><td style="text-align:center;"><code>pencolor(颜色)</code></td><td style="text-align:center;">改变画笔颜色</td></tr><tr><td style="text-align:center;"><code>circle()</code></td><td style="text-align:center;"><code>circle(半径)</code></td><td style="text-align:center;">绘制半径为 <code>半径</code> 的圆形</td></tr><tr><td style="text-align:center;"><code>goto()</code></td><td style="text-align:center;"><code>goto(x 坐标, y 坐标)</code></td><td style="text-align:center;">将画笔移到 (<code>x 坐标</code>, <code>y 坐标</code>)</td></tr><tr><td style="text-align:center;"><code>penup()</code></td><td style="text-align:center;"><code>penup()</code></td><td style="text-align:center;">抬起画笔（移动不会产生线条）</td></tr><tr><td style="text-align:center;"><code>pendown()</code></td><td style="text-align:center;"><code>pendown()</code></td><td style="text-align:center;">放下画笔（移动会产生线条）</td></tr></tbody></table><p>我们只选最为常用的函数讲解</p><h4 id="_4-3-1-turtle-库的使用" tabindex="-1"><a class="header-anchor" href="#_4-3-1-turtle-库的使用" aria-hidden="true">#</a> 4.3.1 turtle 库的使用</h4><p><code>turtle</code> 库作为一个画图库，其底下有很多实用的函数。函数名为了方便理解，都采用了自然语言中的单词以确保简单易懂</p><h5 id="_4-3-1-1-circle-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-1-1-circle-函数" aria-hidden="true">#</a> 4.3.1.1 circle 函数</h5><p><strong>定义：</strong> <code>turtle</code> 库中专门用来画圆的函数</p><p><strong>用途：</strong> 绘制图像中的圆形</p><p><strong>语法：</strong> <code>turtle.circle(半径)</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入 turtle</span>
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> t
<span class="token comment"># 绘制一个半径为 50 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token comment"># 绘制一个半径为 100 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre></div>`,13),Fn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"注意"),n("p",null,"绘制半径的单位是像素，不是厘米")],-1),jn=t(`<h5 id="_4-3-1-2-width-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-1-2-width-函数" aria-hidden="true">#</a> 4.3.1.2 width 函数</h5><p><strong>定义：</strong> <code>turtle</code> 库中设置画笔大小的函数</p><p><strong>用途：</strong> 根据需要改变线条宽度</p><p><strong>语法：</strong> <code>turtle.width(线条粗细)</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入 turtle 库</span>
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> t
<span class="token comment"># 改变画笔粗细为 10</span>
t<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment"># 绘制一个半径为 50 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token comment"># 改变画笔粗细为 20</span>
t<span class="token punctuation">.</span>width<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token comment"># 绘制一个半径为 100 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre></div>`,6),Tn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"笔的粗细的单位也是像素，不是厘米")],-1),Nn=t(`<h4 id="_4-3-1-3-pencolor-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-1-3-pencolor-函数" aria-hidden="true">#</a> 4.3.1.3 pencolor 函数</h4><p><strong>定义：</strong> <code>turtle</code> 中用于改变画笔颜色的库</p><p><strong>用途：</strong> 根据需要改变画笔颜色</p><p><strong>语法：</strong> <code>turtle.pencolor(&quot;颜色&quot;)</code></p><p><strong>示例：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 导入 turtle</span>
<span class="token keyword">import</span> turtle <span class="token keyword">as</span> t
<span class="token comment"># 改变画笔颜色为蓝色</span>
t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 绘制一个半径为 50 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>

<span class="token comment"># 改变画笔颜色为粉色</span>
t<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">&quot;pink&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 绘制一个半径为 100 像素的圆形</span>
t<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre></div>`,6),Ln=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[n("code",null,"pencolor()"),s(" 函数中需填入对应颜色的英文名，不能是中文")])],-1),Pn=n("h3",{id:"_4-4-scikit-learn-库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-4-scikit-learn-库","aria-hidden":"true"},"#"),s(" 4.4 scikit-learn 库")],-1),Xn=n("p",null,"Python 的强项就在于自动化和分析，本章我们将走入 Python 高级使用方式的大门",-1),Wn=n("h4",{id:"_4-4-1-安装-scikit-learn-库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-4-1-安装-scikit-learn-库","aria-hidden":"true"},"#"),s(" 4.4.1 安装 scikit-learn 库")],-1),Kn=n("p",null,[s("开始之前，我们首先要安装好 "),n("code",null,"scikit-learn"),s(" 这个库才能在程序里调用它")],-1),Rn=t(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> scikit-learn
</code></pre></div><h4 id="_4-4-2-大数据分析的一般过程" tabindex="-1"><a class="header-anchor" href="#_4-4-2-大数据分析的一般过程" aria-hidden="true">#</a> 4.4.2 大数据分析的一般过程</h4><div class="language-mermaid" data-ext="mermaid"><pre class="language-mermaid"><code><span class="token keyword">graph</span> LR<span class="token punctuation">;</span>
    process<span class="token text string">[收集数据]</span> <span class="token arrow operator">--&gt;</span> process1<span class="token text string">[建立模型]</span><span class="token punctuation">;</span>
    process1 <span class="token arrow operator">--&gt;</span> process2<span class="token text string">[新数据]</span><span class="token punctuation">;</span>
</code></pre></div><p>收集数据，就是根据需求寻找可能有用的信息</p><p>建立模型，就是将收集到的内容转换为程序能理解的形式</p><p>新数据，就是输入模型后得到的新内容</p><h4 id="_4-4-3-收集数据和预处理" tabindex="-1"><a class="header-anchor" href="#_4-4-3-收集数据和预处理" aria-hidden="true">#</a> 4.4.3 收集数据和预处理</h4><p><img src="`+k+`" alt="收集数据表格"></p><p>我们现在已经拿到了这些数据，下面我们要对他们进行一些基本的处理</p><p><strong>处理数据：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 记录水果特征列表</span>
features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token string">&quot;光滑&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token string">&quot;光滑&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token string">&quot;粗糙&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token string">&quot;粗糙&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">180.</span> <span class="token string">&quot;粗糙&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 记录水果类别</span>
labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橙子&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橙子&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橙子&quot;</span><span class="token punctuation">]</span>
</code></pre></div><p>我们将水果特征和水果类别分别转换为列表，这样能让程序理解。但是这样就够了吗？我们知道计算机都是 0 和 1 组成的，现在 <code>features</code> 的果皮材质一项只有 <code>光滑</code> 和 <code>粗糙</code> 两种情况，我们完全可以分别使用 1 和 0 代替他们。这样会更方便程序计算</p><p>同样的，水果种类也只有 <code>苹果</code> 和 <code>橙子</code>，我们也分别用 0 和 1 表示他们</p><p><strong>进一步处理：</strong></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 记录水果特征列表</span>
features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 记录水果类别</span>
labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</code></pre></div><h4 id="_4-4-4-训练模型" tabindex="-1"><a class="header-anchor" href="#_4-4-4-训练模型" aria-hidden="true">#</a> 4.4.4 训练模型</h4><p>在训练之前，我们要先将 <code>scikit-learn</code> 库安装到 Python。命令是 <code>pip install scikit-learn</code></p><p>那么，如何训练呢？我们首先要知道什么是 KNN 算法。事实上，KNN 是一种基本的分类和回归算法，本质上是让输入与给定的数据集进行距离计算。而 <code>K</code> 就是输入距离最近点的数量</p><p>示例</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> neighbors
<span class="token comment"># 记录水果特征列表</span>
features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token comment"># 记录水果类别</span>
labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># KNN 模型芬妮系数据，K 值为 3</span>
clf<span class="token operator">=</span>neighbors<span class="token punctuation">.</span>KNeighborsClassifier<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 用我们之前收集到的数据分析训练模型</span>
clf<span class="token operator">=</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>

<span class="token comment"># 判断 160 克重、粗糙的水果是苹果还是橙子</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,20),Gn=n("p",null,[n("code",null,"K"),s(" 值为 3 意味着，模型只会检查前三个邻近的数据。即 "),n("code",null,"[150, 0], [170, 0], [168, 0]")],-1),Dn=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("数据越多判断越准确，如果输出的数据有误可能是因为样本数量过少 "),n("code",null,"K"),s(" 值要酌情考虑，结合实际情况填入。如果不填 "),n("code",null,"K"),s(" 值则默认使用所有数据")])],-1);function In(Jn,An){const e=c("Replit"),p=c("CodeGroupItem"),l=c("CodeGroup"),r=c("RouterLink");return d(),u("div",null,[g,m,y,x,w,b,_,v,f,q,Z,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zi-Fu-Chuan-Shu-Ju-Lei-Xing-Zhuan-Huan",file:"main.py"}),H,M,S,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zheng-Shu-Shu-Ju-Lei-Xing-Zhuan-Huan",file:"main.py"}),C,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zheng-Shu-Zhuan-Huan-Zi-Fu-Chuan",file:"main.py"}),Y,B,F,j,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Fu-Dian-Shu-Zhuan-Huan",file:"main.py"}),T,N,L,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Bu-Er-Shu-Ju-Lei-Xing",file:"main.py"}),P,X,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Kong-Zhi",file:"main.py"}),W,K,R,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zheng-Chu-Yun-Suan",file:"main.py"}),G,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zheng-Chu-De-Te-Shu-Xing-Zhi",file:"main.py"}),D,I,J,A,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Qu-Yu-Yun-Suan",file:"main.py"}),V,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Qu-Yu-De-Te-Shu-Xing-Zhi",file:"main.py"}),E,Q,z,a(e,{user:"ShiYiZhiHanZhuZ",repl:"Zi-Fu-Chuan-Yun-Suan-Fu",file:"main.py"}),O,$,U,nn,sn,tn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"ifYu-Ju-Shi-Li",file:"main.py"}),an,a(e,{user:"ShiYiZhiHanZhuZ",repl:"ifelseYu-Ju-Shi-Li",file:"main.py"}),en,on,a(e,{user:"ShiYiZhiHanZhuZ",repl:"ifelifelseYu-Ju-Shi-Li",file:"main.py"}),pn,cn,ln,rn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"forXun-Huan-Shi-Li",file:"main.py"}),dn,un,kn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"forXun-Huan-Shi-Li-2",file:"main.py"}),hn,a(l,null,{default:o(()=>[a(p,{title:"条件循环"},{default:o(()=>[gn]),_:1}),a(p,{title:"死循环"},{default:o(()=>[mn]),_:1})]),_:1}),yn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"whileXun-Huan-Shi-Li",file:"main.py"}),xn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"whileXun-Huan-Shi-Li-2",file:"main.py"}),wn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"whileXun-Huan-Shi-Li-3",file:"main.py"}),bn,_n,vn,fn,qn,a(l,null,{default:o(()=>[a(p,{title:"导入库并赋予库别名"},{default:o(()=>[Zn]),_:1}),a(p,{title:"直接导入库"},{default:o(()=>[Hn]),_:1}),a(p,{title:"导入库中全部函数"},{default:o(()=>[Mn]),_:1})]),_:1}),Sn,Cn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"randintHan-Shu-Shi-Li",file:"main.py"}),Yn,Bn,Fn,jn,Tn,Nn,Ln,Pn,Xn,Wn,Kn,n("p",null,[s("我们只需要打开终端，输入这段命令即可（如何打开终端请看 "),a(r,{to:"/docs/document/pull.html"},{default:o(()=>[s("本地部署")]),_:1}),s("）")]),Rn,a(e,{user:"ShiYiZhiHanZhuZ",repl:"scikit-learnXun-Lian-Mo-Xing",file:"main.py"}),Gn,Dn])}const En=i(h,[["render",In],["__file","8b.html.vue"]]);export{En as default};
